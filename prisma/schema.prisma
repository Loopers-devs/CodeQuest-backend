// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProviderType {
  GOOGLE
  DISCORD
  CREDENTIALS
}

enum Role {
  USER
  ADMIN
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PostVisibility {
  PUBLIC
  MEMBERS
  PRIVATE
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  fullName String
  nickname String? @unique
  roles    Role[]  @default([USER])
  image    String?

  emailVerified           DateTime?
  emailVerificationToken  String?
  emailVerificationExpiry DateTime?

  passwordResetToken       String?
  passwordResetTokenExpiry DateTime?

  password          String?
  providerType      ProviderType
  providerAccountId String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  deletedAt         DateTime?

  // Relaciones
  posts        Post[]
  postFavorites PostFavorite[]

  @@index([providerType])
  @@index([providerAccountId])
}

model Post {
  id String @id @default(uuid())

  slug    String  @unique
  title   String
  summary String?
  content String // markdown o html

  // Clasificación y búsqueda
  category String? // si luego quieres entidad Category, se cambia a relación
  tags     String[] // array de tags (PostgreSQL) para filtros rápidos

  // Publicación
  status        PostStatus     @default(DRAFT)
  visibility    PostVisibility @default(PUBLIC)
  coverImageUrl String?
  publishedAt   DateTime?

  // Métricas
  views          Int @default(0)
  commentsCount  Int @default(0)
  reactionsCount Int @default(0)

  // Auditoría
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Autor
  authorId     Int
  author       User           @relation(fields: [authorId], references: [id])

  // Relaciones derivadas
  favoritedBy PostFavorite[]

  // Índices útiles para listados y buscador
  @@index([status, visibility, publishedAt])
  @@index([category])
  @@index([title])
}

model PostFavorite {
  userId    Int
  postId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@id([userId, postId])
  @@index([postId, userId])
  @@index([userId, createdAt])
}
