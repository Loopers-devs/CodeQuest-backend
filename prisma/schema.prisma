// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProviderType {
  GOOGLE
  DISCORD
  CREDENTIALS
}

enum Role {
  USER
  ADMIN
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PostVisibility {
  PUBLIC     
  MEMBERS    
  PRIVATE    
}

model User {
  id                Int          @id @default(autoincrement())
  email             String       @unique
  fullName          String      
  nickname          String?      @unique
  roles             Role[]       @default([USER])
  image             String?

  emailVerified            DateTime?
  emailVerificationToken   String?
  emailVerificationExpiry  DateTime?
  
  passwordResetToken        String?
  passwordResetTokenExpiry  DateTime?

  password          String?
  providerType      ProviderType
  providerAccountId String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  deletedAt         DateTime?

  posts             Post[]

  @@index([providerType])
  @@index([providerAccountId])
}



model Post {
  id             String          @id @default(uuid())

  slug           String          @unique
  title          String
  summary        String?
  content        String          // markdown o html

  // tags
  tags      Tags[]    @relation("PostTags")

  // Publicación
  status         PostStatus      @default(DRAFT)
  visibility     PostVisibility  @default(PUBLIC)
  coverImageUrl  String?
  publishedAt    DateTime?

  //categoria
  categoryId     String
  category       Category       @relation(fields: [categoryId], references: [id])

  // Métricas
  views          Int             @default(0)
  commentsCount  Int             @default(0)
  reactionsCount Int             @default(0)

  // Auditoría
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime?

  // Autor
  authorId       Int
  author         User            @relation(fields: [authorId], references: [id])

  // Índices útiles para listados y buscador
  @@index([status, visibility, publishedAt])
  @@index([categoryId])
  @@index([title])
}

model Category {
  id           String          @id @default(uuid())
  name         String         @unique
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime?

  posts        Post[]
}

model Tags {
  id           String          @id @default(uuid())
  name         String         @unique
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime?

  posts       Post[]   @relation("PostTags")
}
